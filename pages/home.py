# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\ui\home.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import QSize
from PyQt5.QtGui import QMovie

from Scripts import a_star
from Utils import broadcast

from threads import a_starThread
import sys


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(777, 508)
        self.horizontalLayout = QtWidgets.QHBoxLayout(Form)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.widget = QtWidgets.QWidget(Form)
        self.widget.setStyleSheet("\n"
"background-color: rgb(20, 150, 228);")
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(6, 6, 6, 6)
        self.verticalLayout.setSpacing(6)
        self.verticalLayout.setObjectName("verticalLayout")
        self.widget_2 = QtWidgets.QWidget(self.widget)
        self.widget_2.setMaximumSize(QtCore.QSize(16777215, 50))
        self.widget_2.setStyleSheet("QWidget {\n"
"          \n"
"            background-color: rgb(255, 255, 255);\n"
"            color: #ffffff;\n"
"            padding: 8px;\n"
"            border-radius:20px;\n"
"        }")
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.widget_4 = QtWidgets.QWidget(self.widget_2)
        self.widget_4.setObjectName("widget_4")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget_4)
        self.verticalLayout_2.setContentsMargins(6, 3, 6, 3)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.pushButton = QtWidgets.QPushButton(self.widget_4, clicked=lambda : self.__clear())
        self.pushButton.setMinimumSize(QtCore.QSize(0, 40))
        self.pushButton.setStyleSheet("QPushButton {\n"
"            background-color: #0040B0;\n"
"            color: #ffffff;\n"
"            padding: 3px;\n"
"            border-radius: 12px;\n"
"        }\n"
"\n"
"        QPushButton:hover {\n"
"            background-color: #0069d9;\n"
"        }\n"
"\n"
"        QPushButton:pressed {\n"
"            background-color: #0056b3;\n"
"        }")
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout_2.addWidget(self.pushButton)
        self.horizontalLayout_2.addWidget(self.widget_4)
        self.widget_5 = QtWidgets.QWidget(self.widget_2)
        self.widget_5.setObjectName("widget_5")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.widget_5)
        self.verticalLayout_3.setContentsMargins(6, 3, 6, 3)
        self.verticalLayout_3.setSpacing(3)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.pushButton_2 = QtWidgets.QPushButton(self.widget_5, clicked=lambda : self.__saveAndRun())
        self.pushButton_2.setMinimumSize(QtCore.QSize(0, 40))
        self.pushButton_2.setStyleSheet("QPushButton {\n"
"            background-color: #0040B0;\n"
"            color: #ffffff;\n"
"            padding: 3px;\n"
"            border-radius: 12px;\n"
"        }\n"
"\n"
"        QPushButton:hover {\n"
"            background-color: #0069d9;\n"
"        }\n"
"\n"
"        QPushButton:pressed {\n"
"            background-color: #0056b3;\n"
"        }")
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout_3.addWidget(self.pushButton_2)
        self.horizontalLayout_2.addWidget(self.widget_5)
        self.widget_6 = QtWidgets.QWidget(self.widget_2)
        self.widget_6.setObjectName("widget_6")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.widget_6)
        self.horizontalLayout_3.setContentsMargins(6, 3, 6, 3)
        self.horizontalLayout_3.setSpacing(0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.pushButton_3 = QtWidgets.QPushButton(self.widget_6, clicked=lambda : self.__showInfo())
        self.pushButton_3.setMinimumSize(QtCore.QSize(0, 40))
        self.pushButton_3.setSizeIncrement(QtCore.QSize(0, 0))
        self.pushButton_3.setStyleSheet("QPushButton {\n"
"            background-color: #0040B0;\n"
"            color: #ffffff;\n"
"            padding: 3px;\n"
"            border-radius: 12px;\n"
"        }\n"
"\n"
"        QPushButton:hover {\n"
"            background-color: #0069d9;\n"
"        }\n"
"\n"
"        QPushButton:pressed {\n"
"            background-color: #0056b3;\n"
"        }")
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout_3.addWidget(self.pushButton_3)
        self.horizontalLayout_2.addWidget(self.widget_6)
        self.verticalLayout.addWidget(self.widget_2)
        self.widget_3 = QtWidgets.QWidget(self.widget)
        self.widget_3.setStyleSheet("QWidget {\n"
"          \n"
"            background-color: rgb(255, 255, 255);\n"
"            color: #ffffff;\n"
"            padding: 8px;\n"
"            border-radius:20px;\n"
"        }")
        self.widget_3.setObjectName("widget_3")
        self.verticalLayout.addWidget(self.widget_3)
        self.horizontalLayout.addWidget(self.widget)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)


        # ALGUNS PARÂMETROS DE CONTROLE
        self.currentStart = [None, None]
        self.currentEnd = [None, None]
        self.broadcast = broadcast.Broadcast()
        self.a_star = a_star.AStar_script()
        self.waysButton = None
        self.qwidget = False
        self.mapCount = None
        self.mapOrder = []
        self.qwidgetLoad = False

        self.__initializeData()
        self.__createTable()


    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.pushButton.setText(_translate("Form", "LIMPAR"))
        self.pushButton_2.setText(_translate("Form", "BUSCAR"))
        self.pushButton_3.setText(_translate("Form", "ABOUT"))



    def __initializeData(self):

        self.a_star.createTable()


    def __clear(self):

        self.__initializeData()

        self.table = self.broadcast.saveMap()

        self.finalWay = []
        if self.qwidget != False:
            self.qwidget.setVisible(False)

        index = 0
        for linha in range(0, len(self.table)):
            for coluna in range(0, len(self.table[linha])):
                self.buttomList[index].setText(self.table[linha][coluna]["TEXT"])
                self.buttomList[index].setStyleSheet("background-color: rgb(189, 202, 238);")
                index = index + 1

    def __createTable(self):

        self.broadcast.waysMap([])
        qLayout = QtWidgets.QVBoxLayout(self.widget_3)
        self.buttomList = []
        key = 0


        self.table = self.broadcast.saveMap()

        for linha in range(0, len(self.table)):

            pWidget = QtWidgets.QWidget()
            pWidget.setContentsMargins(0,0,0,0)
            mLayout = QtWidgets.QHBoxLayout(pWidget)
            mLayout.setContentsMargins(0,0,0,0)

            for coluna in range(0, len(self.table[linha])):

                self.buttomList.append(QtWidgets.QPushButton())
                self.buttomList[-1].setText(self.table[linha][coluna]["TEXT"])
                self.buttomList[-1].setFixedSize(QtCore.QSize(100,100))
                self.buttomList[-1].setStyleSheet("background-color: rgb(189, 202, 238);")
                self.buttomList[-1].clicked.connect(lambda state, l=linha, c=coluna, index=key: self.__stateChange(l,c, index))
                mLayout.addWidget(self.buttomList[-1])
                key = key + 1
            qLayout.addWidget(pWidget)



    def __showInfo(self):


        self.__msgBox("Tarcísio B. Prates - LAB IA, CEFET-MG/2023", "About")
        return


    def __showButtomBar(self):


        if self.qwidget == False:


            self.qwidget = QtWidgets.QWidget()
            self.qwidget.setStyleSheet("QWidget {\n"
    "          \n"
    "            background-color: rgb(255, 255, 255);\n"
    "            color: #ffffff;\n"
    "            padding: 8px;\n"
    "            border-radius:20px;\n"
    "        }")

            self.qwidget.setFixedHeight(50)


            qLayout = QtWidgets.QHBoxLayout(self.qwidget)
            qLayout.setContentsMargins(0,0,0,0)

            self.waysButton = QtWidgets.QPushButton()
            self.waysButton.setStyleSheet("QPushButton {\n"
                "background-color: #ffffff;\n"
                "color: #0040B0;\n"
                "padding: 3px;\n"
                "border-radius: 12px;\n"
            "}\nQPushButton:hover {background-color: #eeeeee;}")
            self.waysButton.setText('PRÓXIMO CAMINHO')
            self.waysButton.setFixedHeight(50)

            self.waysText = QtWidgets.QLabel()
            self.waysText.setStyleSheet("QLabel {\n"
                "background-color: #0040B0;\n"
                "color: #ffffff;\n"
                "padding: 3px;\n"
                "border-radius: 12px;\n"
            "}")

            qLayout.addWidget(self.waysButton)
            qLayout.addWidget(self.waysText)

            self.waysButton.clicked.connect(lambda state: self.__nextWay())

            self.verticalLayout.addWidget(self.qwidget)

            if len(self.finalWay) == 0:
                text = 'ROUTE NOT FOUND'
                self.waysText.setText('<html><head/><body><p align="center"><span style=" font-size:11pt; font-weight:600;">' + text + '</span></p></body></html>')

            else:
                self.__nextWay()
        else:
            self.qwidget.setVisible(True)





    def __nextWay(self):

        if len(self.finalWay) == 0:
            self.__msgBox("There isn't route to show")
            return

        text = 'ROUTE: ' + str(self.mapCount) + ' - STEPS: ' + str(len(self.finalWay[self.mapCount])-1) + ''
        self.waysText.setText('<html><head/><body><p align="center"><span style=" font-size:11pt; font-weight:600;">' + text + '</span></p></body></html>')

        self.__updateTable(self.mapCount)

        self.mapCount = self.mapCount - 1

        if self.mapCount < 0:
            self.mapCount = self.mapOrder[-1]






    def __updateTable(self, target):


        index = 0
        for linha in range(0, len(self.table)):
            for coluna in range(0, len(self.table[linha])):

                if self.table[linha][coluna]["STATE"] == 'START':
                    self.buttomList[index].setStyleSheet("background-color:#1E592F;");

                elif self.table[linha][coluna]["STATE"] == 'END':
                    self.buttomList[index].setStyleSheet("background-color: rgb(255, 170, 0);");

                elif self.table[linha][coluna]["STATE"] == "BLOCKED":

                    self.buttomList[index].setText("BLOCKED")
                    self.buttomList[index].setStyleSheet("background-color: rgb(254, 15, 23);");

                elif [linha, coluna] in self.finalWay[target]:

                    for i in range(0, len(self.finalWay[target])):
                        if self.finalWay[target][i] == [linha, coluna]:
                            self.buttomList[index].setText("STEP "+ str(i+1))
                            self.buttomList[index].setStyleSheet("background-color: #000000;")

                else:
                    self.buttomList[index].setText(self.table[linha][coluna]["TEXT"])
                    self.buttomList[index].setStyleSheet("background-color: rgb(189, 202, 238);")

                index = index + 1


    def __updateParams(self):

        self.table = self.broadcast.saveMap()
        self.finalWay = self.broadcast.waysMap()

        if len(self.finalWay) == 0:
            self.finalWay = []
            self.mapOrder = []
            self.mapCount = -1

            self.pLabel2.setVisible(False)
            self.pLabel3.setText('<html><head/><body><p align="center"><span style=" font-size:11pt; font-weight:600; color:#0040b0">NENHUMA ROTA ENCONTRADA</span></p></body></html>')

        else:
            self.qwidgetLoad.setVisible(False)

            for item in self.finalWay:

                self.finalWay[item].reverse()

            self.mapOrder = list(self.finalWay.keys())

            self.mapCount = self.mapOrder[-1]
            self.__showButtomBar()

    def __stateChange(self, l, c, index):


        #states = {'DEFAULT': 0, "BLOCKED": 1, "START": 2, "END": 3}
        #config = {'STATE': "DEFAULT", "ROW": linha, "COL": coluna, "TEXT": text, "DTT": None}


            if self.table[l][c]["STATE"] == "DEFAULT":
                self.table[l][c]["STATE"] = "START"
                self.buttomList[index].setText("START")
                self.buttomList[index].setStyleSheet("background-color:#1E592F;");

            elif self.table[l][c]["STATE"] == "START":
                self.table[l][c]["STATE"] = "END"
                self.buttomList[index].setText("END")
                self.buttomList[index].setStyleSheet("background-color: rgb(255, 170, 0);");

            elif self.table[l][c]["STATE"] == "END":
                self.table[l][c]["STATE"] = "BLOCKED"
                self.buttomList[index].setText("BLOCKED")
                self.buttomList[index].setStyleSheet("background-color: rgb(254, 15, 23);");

            elif self.table[l][c]["STATE"] == "BLOCKED":
                self.table[l][c]["STATE"] = "DEFAULT"
                self.buttomList[index].setText(self.table[l][c]["TEXT"])
                self.buttomList[index].setStyleSheet("background-color: rgb(189, 202, 238);")


    def __saveAndRun(self):

        self.currentStart = [None, None]
        self.currentEnd = [None, None]

        countStart = 0
        countEnd = 0

        for linha in range(0, len(self.table)):
            for coluna in range(0, len(self.table[linha])):

                if self.table[linha][coluna]["STATE"] == "START":
                    self.currentStart = [linha, coluna]
                    countStart = countStart + 1

                elif  self.table[linha][coluna]["STATE"] == "END":
                    self.currentEnd = [linha, coluna]
                    countEnd = countEnd + 1


        if self.currentEnd == [None, None] or self.currentStart == [None, None]:
            self.__msgBox("Selecione um bloco como START e outro como END")
            return


        if countStart > 1:
            self.__msgBox("Selecione apenas um bloco como START")
            return


        if countEnd > 1:
            self.__msgBox("Selecione apenas um bloco como END")
            return


        index = 0
        for linha in range(0, len(self.table)):
            for coluna in range(0, len(self.table[linha])):

                if self.table[linha][coluna]["STATE"] != 'BLOCKED':

                    self.a_star.manhattan(self.table[linha][coluna], self.table[self.currentEnd[0]][self.currentEnd[1]])
                    self.buttomList[index].setText(str(linha) + "," + str(coluna) + " | D: " + str(format(self.table[linha][coluna]["DTT"], '.2f')))

                else:
                    self.table[linha][coluna]["DTT"] = sys.maxsize

                index = index + 1


        self.broadcast.saveMap(self.table)


        self.thStar = a_starThread.AStar()
        self.thStar.run(self.currentStart, self.currentEnd, self.__beginThread, self.__endThread )
        #self.a_star.calculateA(self.currentStart, self.currentEnd)


    def __beginThread(self):

        if self.qwidget != False:
            self.qwidget.setVisible(False)

        self.clearRoutes()

        if self.qwidgetLoad == False:
            self.qwidgetLoad = QtWidgets.QWidget()
            self.qwidgetLoad.setContentsMargins(0,0,0,0)

            self.qwidgetLoad.setStyleSheet("QWidget {\n"
                                       "          \n"
                                       "            background-color: rgb(255, 255, 255);\n"
                                       "            color: #ffffff;\n"
                                       "            padding: 8px;\n"
                                       "            border-radius:20px;\n"
                                       "        }")

            self.qwidgetLoad.setFixedHeight(50)

            qLayout = QtWidgets.QHBoxLayout(self.qwidgetLoad)
            qLayout.setContentsMargins(0, 0, 0, 0)
            qLayout.setAlignment(QtCore.Qt.AlignLeft)

            self.movie2 = QMovie("./images/loading.gif")

            self.movie2.setScaledSize(QSize(60, 60))
            self.pLabel2 = QtWidgets.QLabel()
            self.pLabel2.setMovie(self.movie2)
            self.movie2.start()

            self.pLabel3 = QtWidgets.QLabel()
            self.pLabel3.setText('<html><head/><body><p align="center"><span style=" font-size:11pt; font-weight:600; color:#0040b0"> PROCURANDO MELHOR ROTA</span></p></body></html>')

            qLayout.addWidget(self.pLabel2)
            qLayout.addWidget(self.pLabel3)

            self.verticalLayout.addWidget(self.qwidgetLoad)
        else:
            self.pLabel3.setText('<html><head/><body><p align="center"><span style=" font-size:11pt; font-weight:600; color:#0040b0"> PROCURANDO MELHOR ROTA</span></p></body></html>')
            self.pLabel2.setVisible(True)
            self.pLabel3.setVisible(True)
            self.qwidgetLoad.setVisible(True)






    def clearRoutes(self):

        index = 0
        for linha in range(0, len(self.table)):
            for coluna in range(0, len(self.table[linha])):

                if self.table[linha][coluna]["STATE"] == 'START':
                    self.buttomList[index].setStyleSheet("background-color:#1E592F;");

                elif self.table[linha][coluna]["STATE"] == 'END':
                    self.buttomList[index].setStyleSheet("background-color: rgb(255, 170, 0);");

                elif self.table[linha][coluna]["STATE"] == "BLOCKED":

                    self.buttomList[index].setText("BLOCKED")
                    self.buttomList[index].setStyleSheet("background-color: rgb(254, 15, 23);");

                else:
                    self.buttomList[index].setText(self.table[linha][coluna]["TEXT"])
                    self.buttomList[index].setStyleSheet("background-color: rgb(189, 202, 238);")

                index = index + 1




    def __endThread(self):

        print("Busca finalizada")
        self.__updateParams()




    def __calculate(self):

        countStart = 0
        countEnd = 0


        for key in self.stateMap:

            if self.stateMap[key]["T"] == 3:
                countStart = countStart + 1

            if self.stateMap[key]["T"] == 4:
                countEnd = countEnd + 1



        if countStart > 1:
            self.__msgBox("DEFINA APENAS UM BLOCO COMO START")
            return

        if countEnd > 1:
            self.__msgBox("DEFINA APENAS UM BLOCO COMO END")
            return

        self.broadcast.saveMap(self.stateMap)

        #self.scrTh = a_starThread.AStar()
        #self.scrTh.run()


    def __msgBox(self, message, title="AVISO"):
        messageBox = QtWidgets.QMessageBox()
        messageBox.setWindowTitle(title)
        messageBox.setText(message)
        messageBox.exec_()


    def __setDef(self, key):

        self.stateMap[key]["T"] = 1
        self.buttomList[key].setText(self.stateMap[key]["P"])
        self.buttomList[key].setStyleSheet("background-color: rgb(189, 202, 238);")




    def __buttonStyle(self):

        return "QPushButton {\n"
"            background-color: #0040B0;\n"
"            color: #ffffff;\n"
"            padding: 3px;\n"
"            border-radius: 12px;\n"
"        }\n"
"        QPushButton:hover {\n"
"            background-color: #0069d9;\n"
"        }\n"
"        QPushButton:pressed {\n"
"            background-color: #0056b3;\n"
"        }"








if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
